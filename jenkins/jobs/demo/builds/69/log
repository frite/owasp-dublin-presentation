Started by user [8mha:AAAAlx+LCAAAAAAAAP9b85aBtbiIQTGjNKU4P08vOT+vOD8nVc83PyU1x6OyILUoJzMv2y+/JJUBAhiZGBgqihhk0NSjKDWzXb3RdlLBUSYGJk8GtpzUvPSSDB8G5tKinBIGIZ+sxLJE/ZzEvHT94JKizLx0a6BxUmjGOUNodHsLgAzWEgZu/dLi1CL9xJTczDwAj6GcLcAAAAA=[0madmin
[CustomTools] - ZAProxy_243: Starting installation
[CustomTools] - ZAProxy_243: Tool is installed at /var/jenkins_home/tools/com.cloudbees.jenkins.plugins.customtools.CustomTool/ZAProxy_243/ZAP_2.4.3
[CustomTools] - ZAProxy_243: Setting ZAProxy_243_HOME=/var/jenkins_home/tools/com.cloudbees.jenkins.plugins.customtools.CustomTool/ZAProxy_243/ZAP_2.4.3
Building in workspace /var/jenkins_home/workspace/demo
------- START Replace environment variables -------
ReportName : demo
------- END Replace environment variables -------
------- START Prebuild -------
zapProgram = /var/jenkins_home/tools/com.cloudbees.jenkins.plugins.customtools.CustomTool/ZAProxy_243/ZAP_2.4.3
targetURL = http://*.workdaysuv.com/
zapProxyHost = localhost
zapProxyPort = 8500
Start ZAProxy [/var/jenkins_home/tools/com.cloudbees.jenkins.plugins.customtools.CustomTool/ZAProxy_243/ZAP_2.4.3/zap.sh]
[ZAP_2.4.3] $ /var/jenkins_home/tools/com.cloudbees.jenkins.plugins.customtools.CustomTool/ZAProxy_243/ZAP_2.4.3/zap.sh -daemon -host localhost -port 8500 -config api.key=ZAPROXY-PLUGIN -config api.disablekey=true
Found Java version 1.8.0_102
Available memory: 2002 MB
Setting jvm heap size: -Xmx512m
0 [main] INFO org.zaproxy.zap.DaemonBootstrap  - OWASP ZAP 2.4.3 started.
528 [main] INFO hsqldb.db.HSQLDB379AF3DEBD.ENGINE  - dataFileCache open start
550 [main] INFO hsqldb.db.HSQLDB379AF3DEBD.ENGINE  - dataFileCache open end
976 [main] INFO org.parosproxy.paros.common.AbstractParam  - Setting config api.key = ZAPROXY-PLUGIN was ZAPROXY-PLUGIN
978 [main] INFO org.parosproxy.paros.common.AbstractParam  - Setting config api.disablekey = true was true
982 [main] INFO org.parosproxy.paros.network.SSLConnector  - Reading supported SSL/TLS protocols...
984 [main] INFO org.parosproxy.paros.network.SSLConnector  - Using a SSLEngine...
1179 [main] INFO org.parosproxy.paros.network.SSLConnector  - Done reading supported SSL/TLS protocols: [SSLv2Hello, SSLv3, TLSv1, TLSv1.1, TLSv1.2]
1185 [main] INFO org.parosproxy.paros.extension.option.OptionsParamCertificate  - Unsafe SSL renegotiation disabled.
1211 [ZAP-daemon] INFO org.zaproxy.zap.control.ExtensionFactory  - Loading extensions
2894 [ZAP-daemon] INFO org.zaproxy.zap.control.ExtensionFactory  - Extensions loaded
3091 [ZAP-daemon] INFO org.parosproxy.paros.extension.filter.FilterFactory  - loaded filter Change user agent to other browsers. 
3091 [ZAP-daemon] INFO org.parosproxy.paros.extension.filter.FilterFactory  - loaded filter Detect insecure or potentially malicious content in HTTP responses.
3091 [ZAP-daemon] INFO org.parosproxy.paros.extension.filter.FilterFactory  - loaded filter Detect and alert 'Set-cookie' attempt in HTTP response for modification.
3092 [ZAP-daemon] INFO org.parosproxy.paros.extension.filter.FilterFactory  - loaded filter Avoid browser cache (strip off IfModifiedSince)
3092 [ZAP-daemon] INFO org.parosproxy.paros.extension.filter.FilterFactory  - loaded filter Log cookies sent by browser.
3092 [ZAP-daemon] INFO org.parosproxy.paros.extension.filter.FilterFactory  - loaded filter Log unique GET queries into file:filter/get.xls
3092 [ZAP-daemon] INFO org.parosproxy.paros.extension.filter.FilterFactory  - loaded filter Log unique POST queries into file:  filter/post.xls
3093 [ZAP-daemon] INFO org.parosproxy.paros.extension.filter.FilterFactory  - loaded filter Log request and response into file: filter/message.txt
3093 [ZAP-daemon] INFO org.parosproxy.paros.extension.filter.FilterFactory  - loaded filter Replace HTTP request body using defined pattern.
3093 [ZAP-daemon] INFO org.parosproxy.paros.extension.filter.FilterFactory  - loaded filter Replace HTTP request header using defined pattern.
3093 [ZAP-daemon] INFO org.parosproxy.paros.extension.filter.FilterFactory  - loaded filter Replace HTTP response body using defined pattern.
3093 [ZAP-daemon] INFO org.parosproxy.paros.extension.filter.FilterFactory  - loaded filter Replace HTTP response header using defined pattern.
3093 [ZAP-daemon] INFO org.parosproxy.paros.extension.filter.FilterFactory  - loaded filter Send ZAP session request ID
3138 [ZAP-daemon] INFO org.parosproxy.paros.extension.ExtensionLoader  - Initializing Allows ZAP to check for updates
3157 [ZAP-daemon] INFO org.parosproxy.paros.extension.ExtensionLoader  - Initializing ExtensionViewOption
3160 [ZAP-daemon] INFO org.parosproxy.paros.extension.ExtensionLoader  - Initializing ExtensionEdit
3160 [ZAP-daemon] INFO org.parosproxy.paros.extension.ExtensionLoader  - Initializing ExtensionFilter
3160 [ZAP-daemon] INFO org.parosproxy.paros.extension.ExtensionLoader  - Initializing Provides a rest based API for controlling and accessing ZAP
3338 [ZAP-daemon] INFO org.parosproxy.paros.extension.ExtensionLoader  - Initializing ExtensionState
3339 [ZAP-daemon] INFO org.parosproxy.paros.extension.ExtensionLoader  - Initializing ExtensionHistory
3342 [ZAP-daemon] INFO org.parosproxy.paros.extension.ExtensionLoader  - Initializing Show hidden fields and enable disabled fields
3344 [ZAP-daemon] INFO org.parosproxy.paros.extension.ExtensionLoader  - Initializing Search messages for strings and regular expressions 
3345 [ZAP-daemon] INFO org.parosproxy.paros.extension.ExtensionLoader  - Initializing Encode/Decode/Hash...
3345 [ZAP-daemon] INFO org.parosproxy.paros.extension.ExtensionLoader  - Initializing Allows you to intercept and modify requests and responses
3345 [ZAP-daemon] INFO org.parosproxy.paros.extension.ExtensionLoader  - Initializing Passive scanner
3442 [ZAP-daemon] INFO org.zaproxy.zap.extension.pscan.ExtensionPassiveScan  - loaded passive scan rule: Script passive scan rules
3443 [ZAP-daemon] INFO org.zaproxy.zap.extension.pscan.ExtensionPassiveScan  - loaded passive scan rule: Application Error Disclosure
3444 [ZAP-daemon] INFO org.zaproxy.zap.extension.pscan.ExtensionPassiveScan  - loaded passive scan rule: Incomplete or No Cache-control and Pragma HTTP Header Set
3444 [ZAP-daemon] INFO org.zaproxy.zap.extension.pscan.ExtensionPassiveScan  - loaded passive scan rule: Content-Type Header Missing
3444 [ZAP-daemon] INFO org.zaproxy.zap.extension.pscan.ExtensionPassiveScan  - loaded passive scan rule: Cookie No HttpOnly Flag
3445 [ZAP-daemon] INFO org.zaproxy.zap.extension.pscan.ExtensionPassiveScan  - loaded passive scan rule: Cookie Without Secure Flag
3446 [ZAP-daemon] INFO org.zaproxy.zap.extension.pscan.ExtensionPassiveScan  - loaded passive scan rule: Cross-Domain JavaScript Source File Inclusion
3446 [ZAP-daemon] INFO org.zaproxy.zap.extension.pscan.ExtensionPassiveScan  - loaded passive scan rule: Web Browser XSS Protection Not Enabled
3447 [ZAP-daemon] INFO org.zaproxy.zap.extension.pscan.ExtensionPassiveScan  - loaded passive scan rule: Secure Pages Include Mixed Content
3448 [ZAP-daemon] INFO org.zaproxy.zap.extension.pscan.ExtensionPassiveScan  - loaded passive scan rule: Password Autocomplete in Browser
3448 [ZAP-daemon] INFO org.zaproxy.zap.extension.pscan.ExtensionPassiveScan  - loaded passive scan rule: Private IP Disclosure
3448 [ZAP-daemon] INFO org.zaproxy.zap.extension.pscan.ExtensionPassiveScan  - loaded passive scan rule: Session ID in URL Rewrite
3449 [ZAP-daemon] INFO org.zaproxy.zap.extension.pscan.ExtensionPassiveScan  - loaded passive scan rule: X-Content-Type-Options Header Missing
3449 [ZAP-daemon] INFO org.zaproxy.zap.extension.pscan.ExtensionPassiveScan  - loaded passive scan rule: X-Frame-Options Header Not Set
3474 [ZAP-daemon] INFO org.parosproxy.paros.extension.ExtensionLoader  - Initializing Allows you to view and manage alerts
3475 [ZAP-daemon] INFO org.parosproxy.paros.extension.ExtensionLoader  - Initializing Active scanner, heavily based on the original Paros active scanner, but with additional tests added
3482 [ZAP-daemon] INFO org.parosproxy.paros.extension.ExtensionLoader  - Initializing Spider used for automatically finding URIs on a site
3486 [ZAP-daemon] INFO org.parosproxy.paros.extension.ExtensionLoader  - Initializing A set of common popup menus for miscellaneous tasks
3487 [ZAP-daemon] INFO org.parosproxy.paros.extension.ExtensionLoader  - Initializing Forced browsing of files and directories using code from the OWASP DirBuster tool
3488 [ZAP-daemon] INFO org.parosproxy.paros.extension.ExtensionLoader  - Initializing ExtensionManualRequest
3488 [ZAP-daemon] INFO org.parosproxy.paros.extension.ExtensionLoader  - Initializing Compares 2 sessions and generates an HTML file showing the differences
3489 [ZAP-daemon] INFO org.parosproxy.paros.extension.ExtensionLoader  - Initializing Invoke external applications passing context related information such as URLs and parameters
3489 [ZAP-daemon] INFO org.parosproxy.paros.extension.ExtensionLoader  - Initializing Handles anti cross site request forgery (CSRF) tokens
3491 [ZAP-daemon] INFO org.parosproxy.paros.extension.ExtensionLoader  - Initializing ExtensionAuthentication
4622 [ZAP-daemon] INFO org.zaproxy.zap.extension.authentication.ExtensionAuthentication  - Loaded authentication method types: [Form-based Authentication, HTTP/NTLM Authentication, Manual Authentication, Script-based Authentication]
4623 [ZAP-daemon] INFO org.parosproxy.paros.extension.ExtensionLoader  - Initializing Creates a dynamic SSL certificate to allow SSL communications to be intercepted without warnings being generated by the browser
4689 [ZAP-daemon] INFO org.parosproxy.paros.extension.ExtensionLoader  - Initializing Logs errors to the Output tab in development mode only
4689 [ZAP-daemon] INFO org.parosproxy.paros.extension.ExtensionLoader  - Initializing ExtensionUserManagement
4690 [ZAP-daemon] INFO org.parosproxy.paros.extension.ExtensionLoader  - Initializing Summarise and analyse FORM and URL parameters as well as cookies
4691 [ZAP-daemon] INFO org.parosproxy.paros.extension.ExtensionLoader  - Initializing Script integration
4750 [ZAP-daemon] INFO org.parosproxy.paros.extension.ExtensionLoader  - Initializing ExtensionForcedUser
4751 [ZAP-daemon] INFO org.parosproxy.paros.extension.ExtensionLoader  - Initializing Extension handling HTTP sessions
4751 [ZAP-daemon] INFO org.parosproxy.paros.extension.ExtensionLoader  - Initializing ExtensionDiff
4752 [ZAP-daemon] INFO org.parosproxy.paros.extension.ExtensionLoader  - Initializing ExtensionRequestPostTableView
4752 [ZAP-daemon] INFO org.parosproxy.paros.extension.ExtensionLoader  - Initializing Simple browser configuration
4753 [ZAP-daemon] INFO org.parosproxy.paros.extension.ExtensionLoader  - Initializing ExtensionSessionManagement
4797 [ZAP-daemon] INFO org.zaproxy.zap.extension.sessions.ExtensionSessionManagement  - Loaded session management method types: [Cookie-based Session Management, Http Authentication Session Management]
4797 [ZAP-daemon] INFO org.parosproxy.paros.extension.ExtensionLoader  - Initializing ExtensionHttpPanelRequestFormTableView
4798 [ZAP-daemon] INFO org.parosproxy.paros.extension.ExtensionLoader  - Initializing Summarise and analyse FORM and URL parameters as well as cookies
4798 [ZAP-daemon] INFO org.parosproxy.paros.extension.ExtensionLoader  - Initializing ExtensionAuthorization
4798 [ZAP-daemon] INFO org.parosproxy.paros.extension.ExtensionLoader  - Initializing Handles adding Global Excluded URLs
4798 [ZAP-daemon] WARN org.zaproxy.zap.extension.globalexcludeurl.ExtensionGlobalExcludeURL  - GlobalExcludeURL.optionsLoaded()
4798 [ZAP-daemon] INFO org.parosproxy.paros.extension.ExtensionLoader  - Initializing Adds menu item to refresh the Sites tree
4799 [ZAP-daemon] INFO org.parosproxy.paros.extension.ExtensionLoader  - Initializing Adds support for configurable keyboard shortcuts for all of the ZAP menus.
4799 [ZAP-daemon] INFO org.parosproxy.paros.extension.ExtensionLoader  - Initializing OWASP ZAP User Guide
4799 [ZAP-daemon] INFO org.parosproxy.paros.extension.ExtensionLoader  - Initializing ExtensionReport
4799 [ZAP-daemon] INFO org.parosproxy.paros.extension.ExtensionLoader  - Initializing Allows you to configure which extensions are loaded when ZAP starts 
4800 [ZAP-daemon] INFO org.parosproxy.paros.extension.ExtensionLoader  - Initializing ExtensionHttpPanelComponentonentAll
4800 [ZAP-daemon] INFO org.parosproxy.paros.extension.ExtensionLoader  - Initializing ExtensionHttpPanelHexView
4800 [ZAP-daemon] INFO org.parosproxy.paros.extension.ExtensionLoader  - Initializing ExtensionHttpPanelImageView
4800 [ZAP-daemon] INFO org.parosproxy.paros.extension.ExtensionLoader  - Initializing ExtensionHttpPanelLargeRequestView
4800 [ZAP-daemon] INFO org.parosproxy.paros.extension.ExtensionLoader  - Initializing ExtensionHttpPanelLargeResponseView
4800 [ZAP-daemon] INFO org.parosproxy.paros.extension.ExtensionLoader  - Initializing ExtensionHttpPanelRequestQueryCookieTableView
4801 [ZAP-daemon] INFO org.parosproxy.paros.extension.ExtensionLoader  - Initializing ExtensionHttpPanelSyntaxHighlightTextView
4801 [ZAP-daemon] INFO org.parosproxy.paros.extension.ExtensionLoader  - Initializing Active Scan Rules
4801 [ZAP-daemon] INFO org.parosproxy.paros.extension.ExtensionLoader  - Initializing Translations of the core language files
4801 [ZAP-daemon] INFO org.parosproxy.paros.extension.ExtensionLoader  - Initializing The ZAP Getting Started Guide
4801 [ZAP-daemon] INFO org.parosproxy.paros.extension.ExtensionLoader  - Initializing The Online menu links
4802 [ZAP-daemon] INFO org.parosproxy.paros.extension.ExtensionLoader  - Initializing Passive Scan Rules
4803 [ZAP-daemon] INFO org.parosproxy.paros.extension.ExtensionLoader  - Initializing Quick Start panel 
4803 [ZAP-daemon] INFO org.parosproxy.paros.extension.ExtensionLoader  - Initializing ExtensionSaveRawHttpMessage
4803 [ZAP-daemon] INFO org.parosproxy.paros.extension.ExtensionLoader  - Initializing Tips and Tricks
4805 [ZAP-daemon] WARN org.zaproxy.zap.extension.autoupdate.ExtensionAutoUpdate  - No check for updates for over 3 month - add-ons may well be out of date
5199 [ZAP-daemon] INFO org.zaproxy.zap.DaemonBootstrap  - ZAP is now listening on localhost:8500
------- END Prebuild -------
[demo] $ /bin/sh -xe /tmp/hudson3451056978872614764.sh
+ echo BASH Commands like integration tests
BASH Commands like integration tests
+ echo ===================
===================
+ export IP=172.17.0.3
+ export TARGET=http://172.17.0.3
+ export PROXY=127.0.0.1:8500
+ export ZAP=http://zap
+ curl -x 127.0.0.1:8500 -L http://172.17.0.3
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0100   256  100   256    0     0   1337      0 --:--:-- --:--:-- --:--:--  1340
Connected succesfully to database <br>Selected database succesfully <br><a href="index.php?id=5">random.user</a><br><a href="index.php?id=6">super.admin</a><br><a href="index.php?id=7">adrian.bravo</a><br><a href="index.php?id=8">manolis.mavrofidis</a><br>+ echo Hitted index.php
Hitted index.php
+ curl -x 127.0.0.1:8500 -L http://172.17.0.3/index.php?id=5
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0100   314  100   314    0     0   8816      0 --:--:-- --:--:-- --:--:--  8971
Connected succesfully to database <br>Selected database succesfully <br><a href="index.php?id=5">random.user</a><br><a href="index.php?id=6">super.admin</a><br><a href="index.php?id=7">adrian.bravo</a><br><a href="index.php?id=8">manolis.mavrofidis</a><br><br>The selected result has id 5 and value random.user<br>+ echo id=5
id=5
+ curl -x 127.0.0.1:8500 -L http://172.17.0.3/index.php?id=6
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0100   314  100   314    0     0  10018      0 --:--:-- --:--:-- --:--:-- 10129
Connected succesfully to database <br>Selected database succesfully <br><a href="index.php?id=5">random.user</a><br><a href="index.php?id=6">super.admin</a><br><a href="index.php?id=7">adrian.bravo</a><br><a href="index.php?id=8">manolis.mavrofidis</a><br><br>The selected result has id 6 and value super.admin<br>+ echo id=6
id=6
+ curl -x 127.0.0.1:8500 -L http://172.17.0.3/b/index.php
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0100   256  100   256    0     0  19739      0 --:--:-- --:--:-- --:--:-- 21333
Connected succesfully to database <br>Selected database succesfully <br><a href="index.php?id=5">random.user</a><br><a href="index.php?id=6">super.admin</a><br><a href="index.php?id=7">adrian.bravo</a><br><a href="index.php?id=8">manolis.mavrofidis</a><br>+ echo Hitted b/index.php
Hitted b/index.php
+ echo =====================
=====================
+ echo Configuring ZAP for attack
Configuring ZAP for attack
+ echo 1. Create context
1. Create context
+ curl -x 127.0.0.1:8500 -L http://zap/JSON/context/action/newContext/?contextName=test
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0100    17  100    17    0     0     51      0 --:--:-- --:--:-- --:--:--    51
{"contextId":"2"}+ echo 2. Include target in context
2. Include target in context
+ curl -x 127.0.0.1:8500 -L http://zap/JSON/context/action/includeInContext/?zapapiformat=JSON&contextName=test&regex=\Qhttp%3A%2F%2F172.17.0.3%2F\E.*
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0100    15  100    15    0     0    411      0 --:--:-- --:--:-- --:--:--   428
{"Result":"OK"}+ echo 3. Spider target
3. Spider target
+ curl -x 127.0.0.1:8500 -L http://zap/JSON/spider/action/scan/?zapapiformat=JSON&url=http://172.17.0.3
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0100    12  100    12    0     0   1933      0 --:--:-- --:--:-- --:--:--  1714100    12  100    12    0     0   1788      0 --:--:-- --:--:-- --:--:--  1714
{"scan":"0"}+ echo 3.a. Spider results
3.a. Spider results
+ sleep 10
6708 [Thread-8] INFO org.zaproxy.zap.extension.spider.SpiderThread  - Starting spidering scan on SpiderApi-0 at Thu Sep 01 11:03:25 UTC 2016
6712 [Thread-8] INFO org.zaproxy.zap.spider.Spider  - Spider initializing...
6746 [Thread-8] INFO org.zaproxy.zap.spider.Spider  - Starting spider...
6749 [Thread-8] INFO org.zaproxy.zap.spider.Spider  - Adding seed for spider: http://172.17.0.3/
6757 [Thread-8] INFO org.zaproxy.zap.spider.Spider  - Adding seed for spider: http://172.17.0.3/robots.txt
6765 [Thread-8] INFO org.zaproxy.zap.spider.Spider  - Adding seed for spider: http://172.17.0.3/sitemap.xml
6766 [Thread-8] INFO org.zaproxy.zap.spider.Spider  - Adding seed for spider: http://172.17.0.3/index.php?id=6
6767 [Thread-8] INFO org.zaproxy.zap.spider.Spider  - Adding seed for spider: http://172.17.0.3/robots.txt
6770 [Thread-8] INFO org.zaproxy.zap.spider.Spider  - Adding seed for spider: http://172.17.0.3/sitemap.xml
6770 [Thread-8] INFO org.zaproxy.zap.spider.Spider  - Adding seed for spider: http://172.17.0.3/b
6771 [Thread-8] INFO org.zaproxy.zap.spider.Spider  - Adding seed for spider: http://172.17.0.3/robots.txt
6775 [Thread-8] INFO org.zaproxy.zap.spider.Spider  - Adding seed for spider: http://172.17.0.3/sitemap.xml
6777 [Thread-8] INFO org.zaproxy.zap.spider.Spider  - Adding seed for spider: http://172.17.0.3/b/index.php
6779 [Thread-8] INFO org.zaproxy.zap.spider.Spider  - Adding seed for spider: http://172.17.0.3/robots.txt
6779 [Thread-8] INFO org.zaproxy.zap.spider.Spider  - Adding seed for spider: http://172.17.0.3/sitemap.xml
6920 [pool-1-thread-2] INFO org.zaproxy.zap.spider.Spider  - Spidering process is complete. Shutting down...
6925 [Thread-9] INFO org.zaproxy.zap.extension.spider.SpiderThread  - Spider scanning complete: true
+ curl -x 127.0.0.1:8500 -L http://zap/JSON/spider/view/results/?zapapiformat=JSON&scanId=0
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0100   462  100   462    0     0   203k      0 --:--:-- --:--:-- --:--:--  451k
{"results":["http://172.17.0.3/","http://172.17.0.3/robots.txt","http://172.17.0.3/sitemap.xml","http://172.17.0.3/index.php?id=5","http://172.17.0.3/index.php?id=6","http://172.17.0.3/b/index.php","http://172.17.0.3/index.php?id=7","http://172.17.0.3/index.php?id=8","http://172.17.0.3/b/","http://172.17.0.3/b/index.php?id=8","http://172.17.0.3/b","http://172.17.0.3/b/index.php?id=6","http://172.17.0.3/b/index.php?id=7","http://172.17.0.3/b/index.php?id=5"]}+ echo 4. Active scan -the one that finds ths vulns anyway-
4. Active scan -the one that finds ths vulns anyway-
+ curl -x 127.0.0.1:8500 -L http://zap/JSON/ascan/action/scan/?zapapiformat=JSON&url=http://172.17.0.3
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     016858 [ZAP-ProxyThread-10] INFO org.parosproxy.paros.core.scanner.PluginFactory  - loaded plugin Path Traversal
16860 [ZAP-ProxyThread-10] INFO org.parosproxy.paros.core.scanner.PluginFactory  - loaded plugin Remote File Inclusion
16861 [ZAP-ProxyThread-10] INFO org.parosproxy.paros.core.scanner.PluginFactory  - loaded plugin Server Side Include
16861 [ZAP-ProxyThread-10] INFO org.parosproxy.paros.core.scanner.PluginFactory  - loaded plugin Cross Site Scripting (Reflected)
16862 [ZAP-ProxyThread-10] INFO org.parosproxy.paros.core.scanner.PluginFactory  - loaded plugin Cross Site Scripting (Persistent)
16864 [ZAP-ProxyThread-10] INFO org.parosproxy.paros.core.scanner.PluginFactory  - loaded plugin SQL Injection
16865 [ZAP-ProxyThread-10] INFO org.parosproxy.paros.core.scanner.PluginFactory  - loaded plugin Server Side Code Injection
16865 [ZAP-ProxyThread-10] INFO org.parosproxy.paros.core.scanner.PluginFactory  - loaded plugin Remote OS Command Injection
16865 [ZAP-ProxyThread-10] INFO org.parosproxy.paros.core.scanner.PluginFactory  - loaded plugin Directory Browsing
16865 [ZAP-ProxyThread-10] INFO org.parosproxy.paros.core.scanner.PluginFactory  - loaded plugin External Redirect
16866 [ZAP-ProxyThread-10] INFO org.parosproxy.paros.core.scanner.PluginFactory  - loaded plugin Buffer Overflow
16866 [ZAP-ProxyThread-10] INFO org.parosproxy.paros.core.scanner.PluginFactory  - loaded plugin Format String Error
16867 [ZAP-ProxyThread-10] INFO org.parosproxy.paros.core.scanner.PluginFactory  - loaded plugin CRLF Injection
16867 [ZAP-ProxyThread-10] INFO org.parosproxy.paros.core.scanner.PluginFactory  - loaded plugin Parameter Tampering
16870 [ZAP-ProxyThread-10] INFO org.parosproxy.paros.core.scanner.PluginFactory  - loaded plugin Cross Site Scripting (Persistent) - Prime
16870 [ZAP-ProxyThread-10] INFO org.parosproxy.paros.core.scanner.PluginFactory  - loaded plugin Cross Site Scripting (Persistent) - Spider
16870 [ZAP-ProxyThread-10] INFO org.parosproxy.paros.core.scanner.PluginFactory  - loaded plugin Script Active Scan Rules
16871 [ZAP-ProxyThread-10] INFO org.parosproxy.paros.core.scanner.Scanner  - scanner started
100    12  100    12    0     0     83      0 --:--:-- --:--:-- --:--:--    83
{"scan":"0"}+ sleep 20
16880 [Thread-10] INFO org.parosproxy.paros.core.scanner.PluginFactory  - loaded plugin Path Traversal
16885 [Thread-10] INFO org.parosproxy.paros.core.scanner.PluginFactory  - loaded plugin Remote File Inclusion
16886 [Thread-10] INFO org.parosproxy.paros.core.scanner.PluginFactory  - loaded plugin Server Side Include
16887 [Thread-10] INFO org.parosproxy.paros.core.scanner.PluginFactory  - loaded plugin Cross Site Scripting (Reflected)
16888 [Thread-10] INFO org.parosproxy.paros.core.scanner.PluginFactory  - loaded plugin Cross Site Scripting (Persistent)
16888 [Thread-10] INFO org.parosproxy.paros.core.scanner.PluginFactory  - loaded plugin SQL Injection
16888 [Thread-10] INFO org.parosproxy.paros.core.scanner.PluginFactory  - loaded plugin Server Side Code Injection
16888 [Thread-10] INFO org.parosproxy.paros.core.scanner.PluginFactory  - loaded plugin Remote OS Command Injection
16889 [Thread-10] INFO org.parosproxy.paros.core.scanner.PluginFactory  - loaded plugin Directory Browsing
16889 [Thread-10] INFO org.parosproxy.paros.core.scanner.PluginFactory  - loaded plugin External Redirect
16889 [Thread-10] INFO org.parosproxy.paros.core.scanner.PluginFactory  - loaded plugin Buffer Overflow
16889 [Thread-10] INFO org.parosproxy.paros.core.scanner.PluginFactory  - loaded plugin Format String Error
16890 [Thread-10] INFO org.parosproxy.paros.core.scanner.PluginFactory  - loaded plugin CRLF Injection
16892 [Thread-10] INFO org.parosproxy.paros.core.scanner.PluginFactory  - loaded plugin Parameter Tampering
16892 [Thread-10] INFO org.parosproxy.paros.core.scanner.PluginFactory  - loaded plugin Cross Site Scripting (Persistent) - Prime
16894 [Thread-10] INFO org.parosproxy.paros.core.scanner.PluginFactory  - loaded plugin Cross Site Scripting (Persistent) - Spider
16895 [Thread-10] INFO org.parosproxy.paros.core.scanner.PluginFactory  - loaded plugin Script Active Scan Rules
16921 [Thread-11] INFO org.parosproxy.paros.core.scanner.HostProcess  - start host http://172.17.0.3 | TestPathTraversal strength MEDIUM threshold MEDIUM
17547 [Thread-11] INFO org.parosproxy.paros.core.scanner.HostProcess  - completed host/plugin http://172.17.0.3 | TestPathTraversal in 0.628s
17548 [Thread-11] INFO org.parosproxy.paros.core.scanner.HostProcess  - start host http://172.17.0.3 | TestRemoteFileInclude strength MEDIUM threshold MEDIUM
18161 [Thread-11] INFO org.parosproxy.paros.core.scanner.HostProcess  - completed host/plugin http://172.17.0.3 | TestRemoteFileInclude in 0.613s
18161 [Thread-11] INFO org.parosproxy.paros.core.scanner.HostProcess  - start host http://172.17.0.3 | TestServerSideInclude strength MEDIUM threshold MEDIUM
18578 [Thread-11] INFO org.parosproxy.paros.core.scanner.HostProcess  - completed host/plugin http://172.17.0.3 | TestServerSideInclude in 0.417s
18579 [Thread-11] INFO org.parosproxy.paros.core.scanner.HostProcess  - start host http://172.17.0.3 | TestCrossSiteScriptV2 strength MEDIUM threshold MEDIUM
18999 [Thread-11] INFO org.parosproxy.paros.core.scanner.HostProcess  - completed host/plugin http://172.17.0.3 | TestCrossSiteScriptV2 in 0.42s
19000 [Thread-11] INFO org.parosproxy.paros.core.scanner.HostProcess  - start host http://172.17.0.3 | TestSQLInjection strength MEDIUM threshold MEDIUM
19419 [Thread-11] INFO org.parosproxy.paros.core.scanner.HostProcess  - completed host/plugin http://172.17.0.3 | TestSQLInjection in 0.419s
19420 [Thread-11] INFO org.parosproxy.paros.core.scanner.HostProcess  - start host http://172.17.0.3 | CodeInjectionPlugin strength MEDIUM threshold MEDIUM
19835 [Thread-11] INFO org.parosproxy.paros.core.scanner.HostProcess  - completed host/plugin http://172.17.0.3 | CodeInjectionPlugin in 0.415s
19837 [Thread-11] INFO org.parosproxy.paros.core.scanner.HostProcess  - start host http://172.17.0.3 | CommandInjectionPlugin strength MEDIUM threshold MEDIUM
20282 [Thread-11] INFO org.parosproxy.paros.core.scanner.HostProcess  - completed host/plugin http://172.17.0.3 | CommandInjectionPlugin in 0.445s
20282 [Thread-11] INFO org.parosproxy.paros.core.scanner.HostProcess  - start host http://172.17.0.3 | TestDirectoryBrowsing strength MEDIUM threshold MEDIUM
20900 [Thread-11] INFO org.parosproxy.paros.core.scanner.HostProcess  - completed host/plugin http://172.17.0.3 | TestDirectoryBrowsing in 0.618s
20900 [Thread-11] INFO org.parosproxy.paros.core.scanner.HostProcess  - start host http://172.17.0.3 | TestExternalRedirect strength MEDIUM threshold MEDIUM
21312 [Thread-11] INFO org.parosproxy.paros.core.scanner.HostProcess  - completed host/plugin http://172.17.0.3 | TestExternalRedirect in 0.412s
21313 [Thread-11] INFO org.parosproxy.paros.core.scanner.HostProcess  - start host http://172.17.0.3 | BufferOverflow strength MEDIUM threshold MEDIUM
21744 [Thread-11] INFO org.parosproxy.paros.core.scanner.HostProcess  - completed host/plugin http://172.17.0.3 | BufferOverflow in 0.431s
21744 [Thread-11] INFO org.parosproxy.paros.core.scanner.HostProcess  - start host http://172.17.0.3 | FormatString strength MEDIUM threshold MEDIUM
22156 [Thread-11] INFO org.parosproxy.paros.core.scanner.HostProcess  - completed host/plugin http://172.17.0.3 | FormatString in 0.412s
22157 [Thread-11] INFO org.parosproxy.paros.core.scanner.HostProcess  - start host http://172.17.0.3 | TestInjectionCRLF strength MEDIUM threshold MEDIUM
22575 [Thread-11] INFO org.parosproxy.paros.core.scanner.HostProcess  - completed host/plugin http://172.17.0.3 | TestInjectionCRLF in 0.418s
22575 [Thread-11] INFO org.parosproxy.paros.core.scanner.HostProcess  - start host http://172.17.0.3 | TestParameterTamper strength MEDIUM threshold MEDIUM
22986 [Thread-11] INFO org.parosproxy.paros.core.scanner.HostProcess  - completed host/plugin http://172.17.0.3 | TestParameterTamper in 0.411s
22986 [Thread-11] INFO org.parosproxy.paros.core.scanner.HostProcess  - start host http://172.17.0.3 | TestPersistentXSSPrime strength MEDIUM threshold MEDIUM
23405 [Thread-11] INFO org.parosproxy.paros.core.scanner.HostProcess  - completed host/plugin http://172.17.0.3 | TestPersistentXSSPrime in 0.419s
23407 [Thread-11] INFO org.parosproxy.paros.core.scanner.HostProcess  - start host http://172.17.0.3 | TestPersistentXSSSpider strength MEDIUM threshold MEDIUM
24029 [Thread-11] INFO org.parosproxy.paros.core.scanner.HostProcess  - completed host/plugin http://172.17.0.3 | TestPersistentXSSSpider in 0.622s
24030 [Thread-11] INFO org.parosproxy.paros.core.scanner.HostProcess  - start host http://172.17.0.3 | TestPersistentXSSAttack strength MEDIUM threshold MEDIUM
24236 [Thread-11] INFO org.parosproxy.paros.core.scanner.HostProcess  - completed host/plugin http://172.17.0.3 | TestPersistentXSSAttack in 0.206s
24237 [Thread-11] INFO org.parosproxy.paros.core.scanner.HostProcess  - start host http://172.17.0.3 | ScriptsActiveScanner strength MEDIUM threshold MEDIUM
24248 [Thread-11] INFO org.parosproxy.paros.core.scanner.HostProcess  - completed host/plugin http://172.17.0.3 | ScriptsActiveScanner in 0.011s
24248 [Thread-11] INFO org.parosproxy.paros.core.scanner.HostProcess  - completed host http://172.17.0.3 in 7.342s
24248 [Thread-10] INFO org.parosproxy.paros.core.scanner.Scanner  - scanner completed in 7.377s
+ echo 5. Results
5. Results
+ curl -x 127.0.0.1:8500 -L zap/XML/core/view/alerts/?zapapiformat=JSON&baseurl=http://172.17.0.3
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0<?xml version="1.0" encoding="UTF-8" standalone="no"?><alerts type="list"><alert type="set"><other>The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: 
X-XSS-Protection: 1; mode=block
X-XSS-Protection: 1; report=http://www.example.com/xss
The following values would disable it:
X-XSS-Protection: 0
The X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).
Note that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).</other><evidence/><cweid>933</cweid><confidence>Medium</confidence><wascid>14</wascid><description>Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server</description><messageId>1</messageId><url>http://172.17.0.3/</url><reference>https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet
https://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/</reference><solution>Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.</solution><alert>Web Browser XSS Protection Not Enabled</alert><param/><attack/><risk>Low</risk><id>0</id></alert><alert type="set"><other>This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.
At "High" threshold this scanner will not alert on client or server error responses.</other><evidence/><cweid>0</cweid><confidence>Medium</confidence><wascid>15</wascid><description>The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.</description><messageId>1</messageId><url>http://172.17.0.3/</url><reference>http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx
https://www.owasp.org/index.php/List_of_useful_HTTP_headers</reference><solution>Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.
If possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.</solution><alert>X-Content-Type-Options Header Missing</alert><param/><attack/><risk>Low</risk><id>1</id></alert><alert type="set"><other>At "High" threshold this scanner will not alert on client or server error responses.</other><evidence/><cweid>0</cweid><confidence>Medium</confidence><wascid>0</wascid><description>X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.</description><messageId>1</messageId><url>http://172.17.0.3/</url><reference>http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx</reference><solution>Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY.  ALLOW-FROM allows specific websites to frame the web page in supported web browsers).</solution><alert>X-Frame-Options Header Not Set</alert><param/><attack/><risk>Medium</risk><id>2</id></alert><alert type="set"><other>The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: 
X-XSS-Protection: 1; mode=block
X-XSS-Protection: 1; report=http://www.example.com/xss
The following values would disable it:
X-XSS-Protection: 0
The X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).
Note that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).</other><evidence/><cweid>933</cweid><confidence>Medium</confidence><wascid>14</wascid><description>Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server</description><messageId>3</messageId><url>http://172.17.0.3/index.php?id=5</url><reference>https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet
https://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/</reference><solution>Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.</solution><alert>Web Browser XSS Protection Not Enabled</alert><param/><attack/><risk>Low</risk><id>3</id></alert><alert type="set"><other>This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.
At "High" threshold this scanner will not alert on client or server error responses.</other><evidence/><cweid>0</cweid><confidence>Medium</confidence><wascid>15</wascid><description>The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.</description><messageId>3</messageId><url>http://172.17.0.3/index.php?id=5</url><reference>http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx
https://www.owasp.org/index.php/List_of_useful_HTTP_headers</reference><solution>Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.
If possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.</solution><alert>X-Content-Type-Options Header Missing</alert><param/><attack/><risk>Low</risk><id>4</id></alert><alert type="set"><other>At "High" threshold this scanner will not alert on client or server error responses.</other><evidence/><cweid>0</cweid><confidence>Medium</confidence><wascid>0</wascid><description>X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.</description><messageId>3</messageId><url>http://172.17.0.3/index.php?id=5</url><reference>http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx</reference><solution>Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY.  ALLOW-FROM allows specific websites to frame the web page in supported web browsers).</solution><alert>X-Frame-Options Header Not Set</alert><param/><attack/><risk>Medium</risk><id>5</id></alert><alert type="set"><other>The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: 
X-XSS-Protection: 1; mode=block
X-XSS-Protection: 1; report=http://www.example.com/xss
The following values would disable it:
X-XSS-Protection: 0
The X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).
Note that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).</other><evidence/><cweid>933</cweid><confidence>Medium</confidence><wascid>14</wascid><description>Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server</description><messageId>4</messageId><url>http://172.17.0.3/index.php?id=6</url><reference>https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet
https://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/</reference><solution>Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.</solution><alert>Web Browser XSS Protection Not Enabled</alert><param/><attack/><risk>Low</risk><id>6</id></alert><alert type="set"><other>This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.
At "High" threshold this scanner will not alert on client or server error responses.</other><evidence/><cweid>0</cweid><confidence>Medium</confidence><wascid>15</wascid><description>The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.</description><messageId>4</messageId><url>http://172.17.0.3/index.php?id=6</url><reference>http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx
https://www.owasp.org/index.php/List_of_useful_HTTP_headers</reference><solution>Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.
If possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.</solution><alert>X-Content-Type-Options Header Missing</alert><param/><attack/><risk>Low</risk><id>7</id></alert><alert type="set"><other>At "High" threshold this scanner will not alert on client or server error responses.</other><evidence/><cweid>0</cweid><confidence>Medium</confidence><wascid>0</wascid><description>X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.</description><messageId>4</messageId><url>http://172.17.0.3/index.php?id=6</url><reference>http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx</reference><solution>Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY.  ALLOW-FROM allows specific websites to frame the web page in supported web browsers).</solution><alert>X-Frame-Options Header Not Set</alert><param/><attack/><risk>Medium</risk><id>8</id></alert><alert type="set"><other>The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: 
X-XSS-Protection: 1; mode=block
X-XSS-Protection: 1; report=http://www.example.com/xss
The following values would disable it:
X-XSS-Protection: 0
The X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).
Note that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).</other><evidence/><cweid>933</cweid><confidence>Medium</confidence><wascid>14</wascid><description>Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server</description><messageId>5</messageId><url>http://172.17.0.3/b/index.php</url><reference>https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet
https://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/</reference><solution>Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.</solution><alert>Web Browser XSS Protection Not Enabled</alert><param/><attack/><risk>Low</risk><id>9</id></alert><alert type="set"><other>This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.
At "High" threshold this scanner will not alert on client or server error responses.</other><evidence/><cweid>0</cweid><confidence>Medium</confidence><wascid>15</wascid><description>The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.</description><messageId>5</messageId><url>http://172.17.0.3/b/index.php</url><reference>http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx
https://www.owasp.org/index.php/List_of_useful_HTTP_headers</reference><solution>Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.
If possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.</solution><alert>X-Content-Type-Options Header Missing</alert><param/><attack/><risk>Low</risk><id>10</id></alert><alert type="set"><other>At "High" threshold this scanner will not alert on client or server error responses.</other><evidence/><cweid>0</cweid><confidence>Medium</confidence><wascid>0</wascid><description>X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.</description><messageId>5</messageId><url>http://172.17.0.3/b/index.php</url><reference>http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx</reference><solution>Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY.  ALLOW-FROM allows specific websites to frame the web page in supported web browsers).</solution><alert>X-Frame-Options Header Not Set</alert><param/><attack/><risk>Medium</risk><id>11</id></alert><alert type="set"><other>The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: 
X-XSS-Protection: 1; mode=block
X-XSS-Protection: 1; report=http://www.example.com/xss
The following values would disable it:
X-XSS-Protection: 0
The X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).
Note that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).</other><evidence/><cweid>933</cweid><confidence>Medium</confidence><wascid>14</wascid><description>Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server</description><messageId>14</messageId><url>http://172.17.0.3/robots.txt</url><reference>https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet
https://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/</reference><solution>Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.</solution><alert>Web Browser XSS Protection Not Enabled</alert><param/><attack/><risk>Low</risk><id>15</id></alert><alert type="set"><other>172.17.0.3
</other><evidence>172.17.0.3</evidence><cweid>200</cweid><confidence>Medium</confidence><wascid>13</wascid><description>A private IP such as 10.x.x.x, 172.x.x.x, 192.168.x.x has been found in the HTTP response body. This information might be helpful for further attacks targeting internal systems.</description><messageId>14</messageId><url>http://172.17.0.3/robots.txt</url><reference>https://tools.ietf.org/html/rfc1918</reference><solution>Remove the private IP address from the HTTP response body.  For comments, use JSP/ASP comment instead of HTML/JavaScript comment which can be seen by client browsers.</solution><alert>Private IP Disclosure</alert><param/><attack>172.17.0.3</attack><risk>Low</risk><id>16</id></alert><alert type="set"><other>This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.
At "High" threshold this scanner will not alert on client or server error responses.</other><evidence/><cweid>0</cweid><confidence>Medium</confidence><wascid>15</wascid><description>The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.</description><messageId>14</messageId><url>http://172.17.0.3/robots.txt</url><reference>http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx
https://www.owasp.org/index.php/List_of_useful_HTTP_headers</reference><solution>Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.
If possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.</solution><alert>X-Content-Type-Options Header Missing</alert><param/><attack/><risk>Low</risk><id>17</id></alert><alert type="set"><other>At "High" threshold this scanner will not alert on client or server error responses.</other><evidence/><cweid>0</cweid><confidence>Medium</confidence><wascid>0</wascid><description>X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.</description><messageId>14</messageId><url>http://172.17.0.3/robots.txt</url><reference>http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx</reference><solution>Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY.  ALLOW-FROM allows specific websites to frame the web page in supported web browsers).</solution><alert>X-Frame-Options Header Not Set</alert><param/><attack/><risk>Medium</risk><id>18</id></alert><alert type="set"><other>The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: 
X-XSS-Protection: 1; mode=block
X-XSS-Protection: 1; report=http://www.example.com/xss
The following values would disable it:
X-XSS-Protection: 0
The X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).
Note that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).</other><evidence/><cweid>933</cweid><confidence>Medium</confidence><wascid>14</wascid><description>Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server</description><messageId>15</messageId><url>http://172.17.0.3/sitemap.xml</url><reference>https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet
https://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/</reference><solution>Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.</solution><alert>Web Browser XSS Protection Not Enabled</alert><param/><attack/><risk>Low</risk><id>19</id></alert><alert type="set"><other>172.17.0.3
</other><evidence>172.17.0.3</evidence><cweid>200</cweid><confidence>Medium</confidence><wascid>13</wascid><description>A private IP such as 10.x.x.x, 172.x.x.x, 192.168.x.x has been found in the HTTP response body. This information might be helpful for further attacks targeting internal systems.</description><messageId>15</messageId><url>http://172.17.0.3/sitemap.xml</url><reference>https://tools.ietf.org/html/rfc1918</reference><solution>Remove the private IP address from the HTTP response body.  For comments, use JSP/ASP comment instead of HTML/JavaScript comment which can be seen by client browsers.</solution><alert>Private IP Disclosure</alert><param/><attack>172.17.0.3</attack><risk>Low</risk><id>20</id></alert><alert type="set"><other>This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.
At "High" threshold this scanner will not alert on client or server error responses.</other><evidence/><cweid>0</cweid><confidence>Medium</confidence><wascid>15</wascid><description>The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.</description><messageId>15</messageId><url>http://172.17.0.3/sitemap.xml</url><reference>http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx
https://www.owasp.org/index.php/List_of_useful_HTTP_headers</reference><solution>Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.
If possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.</solution><alert>X-Content-Type-Options Header Missing</alert><param/><attack/><risk>Low</risk><id>21</id></alert><alert type="set"><other>At "High" threshold this scanner will not alert on client or server error responses.</other><evidence/><cweid>0</cweid><confidence>Medium</confidence><wascid>0</wascid><description>X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.</description><messageId>15</messageId><url>http://172.17.0.3/sitemap.xml</url><reference>http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx</reference><solution>Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY.  ALLOW-FROM allows specific websites to frame the web page in supported web browsers).</solution><alert>X-Frame-Options Header Not Set</alert><param/><attack/><risk>Medium</risk><id>22</id></alert><alert type="set"><other>The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: 
X-XSS-Protection: 1; mode=block
X-XSS-Protection: 1; report=http://www.example.com/xss
The following values would disable it:
X-XSS-Protection: 0
The X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).
Note that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).</other><evidence/><cweid>933</cweid><confidence>Medium</confidence><wascid>14</wascid><description>Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server</description><messageId>20</messageId><url>http://172.17.0.3/b</url><reference>https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet
https://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/</reference><solution>Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.</solution><alert>Web Browser XSS Protection Not Enabled</alert><param/><attack/><risk>Low</risk><id>26</id></alert><alert type="set"><other>172.17.0.3
172.17.0.3
</other><evidence>172.17.0.3</evidence><cweid>200</cweid><confidence>Medium</confidence><wascid>13</wascid><description>A private IP such as 10.x.x.x, 172.x.x.x, 192.168.x.x has been found in the HTTP response body. This information might be helpful for further attacks targeting internal systems.</description><messageId>20</messageId><url>http://172.17.0.3/b</url><reference>https://tools.ietf.org/html/rfc1918</reference><solution>Remove the private IP address from the HTTP response body.  For comments, use JSP/ASP comment instead of HTML/JavaScript comment which can be seen by client browsers.</solution><alert>Private IP Disclosure</alert><param/><attack>172.17.0.3</attack><risk>Low</risk><id>27</id></alert><alert type="set"><other>This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.
At "High" threshold this scanner will not alert on client or server error responses.</other><evidence/><cweid>0</cweid><confidence>Medium</confidence><wascid>15</wascid><description>The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.</description><messageId>20</messageId><url>http://172.17.0.3/b</url><reference>http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx
https://www.owasp.org/index.php/List_of_useful_HTTP_headers</reference><solution>Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.
If possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.</solution><alert>X-Content-Type-Options Header Missing</alert><param/><attack/><risk>Low</risk><id>28</id></alert><alert type="set"><other>At "High" threshold this scanner will not alert on client or server error responses.</other><evidence/><cweid>0</cweid><confidence>Medium</confidence><wascid>0</wascid><description>X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.</description><messageId>20</messageId><url>http://172.17.0.3/b</url><reference>http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx</reference><solution>Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY.  ALLOW-FROM allows specific websites to frame the web page in supported web browsers).</solution><alert>X-Frame-Options Header Not Set</alert><param/><attack/><risk>Medium</risk><id>29</id></alert><alert type="set"><other>The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: 
X-XSS-Protection: 1; mode=block
X-XSS-Protection: 1; report=http://www.example.com/xss
The following values would disable it:
X-XSS-Protection: 0
The X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).
Note that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).</other><evidence/><cweid>933</cweid><confidence>Medium</confidence><wascid>14</wascid><description>Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server</description><messageId>28</messageId><url>http://172.17.0.3/index.php?id=8</url><reference>https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet
https://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/</reference><solution>Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.</solution><alert>Web Browser XSS Protection Not Enabled</alert><param/><attack/><risk>Low</risk><id>36</id></alert><alert type="set"><other>This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.
At "High" threshold this scanner will not alert on client or server error responses.</other><evidence/><cweid>0</cweid><confidence>Medium</confidence><wascid>15</wascid><description>The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.</description><messageId>28</messageId><url>http://172.17.0.3/index.php?id=8</url><reference>http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx
https://www.owasp.org/index.php/List_of_useful_HTTP_headers</reference><solution>Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.
If possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.</solution><alert>X-Content-Type-Options Header Missing</alert><param/><attack/><risk>Low</risk><id>37</id></alert><alert type="set"><other>At "High" threshold this scanner will not alert on client or server error responses.</other><evidence/><cweid>0</cweid><confidence>Medium</confidence><wascid>0</wascid><description>X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.</description><messageId>28</messageId><url>http://172.17.0.3/index.php?id=8</url><reference>http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx</reference><solution>Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY.  ALLOW-FROM allows specific websites to frame the web page in supported web browsers).</solution><alert>X-Frame-Options Header Not Set</alert><param/><attack/><risk>Medium</risk><id>38</id></alert><alert type="set"><other>The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: 
X-XSS-Protection: 1; mode=block
X-XSS-Protection: 1; report=http://www.example.com/xss
The following values would disable it:
X-XSS-Protection: 0
The X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).
Note that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).</other><evidence/><cweid>933</cweid><confidence>Medium</confidence><wascid>14</wascid><description>Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server</description><messageId>29</messageId><url>http://172.17.0.3/index.php?id=7</url><reference>https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet
https://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/</reference><solution>Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.</solution><alert>Web Browser XSS Protection Not Enabled</alert><param/><attack/><risk>Low</risk><id>39</id></alert><alert type="set"><other>This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.
At "High" threshold this scanner will not alert on client or server error responses.</other><evidence/><cweid>0</cweid><confidence>Medium</confidence><wascid>15</wascid><description>The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.</description><messageId>29</messageId><url>http://172.17.0.3/index.php?id=7</url><reference>http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx
https://www.owasp.org/index.php/List_of_useful_HTTP_headers</reference><solution>Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.
If possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.</solution><alert>X-Content-Type-Options Header Missing</alert><param/><attack/><risk>Low</risk><id>40</id></alert><alert type="set"><other>At "High" threshold this scanner will not alert on client or server error responses.</other><evidence/><cweid>0</cweid><confidence>Medium</confidence><wascid>0</wascid><description>X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.</description><messageId>29</messageId><url>http://172.17.0.3/index.php?id=7</url><reference>http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx</reference><solution>Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY.  ALLOW-FROM allows specific websites to frame the web page in supported web browsers).</solution><alert>X-Frame-Options Header Not Set</alert><param/><attack/><risk>Medium</risk><id>41</id></alert><alert type="set"><other>The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: 
X-XSS-Protection: 1; mode=block
X-XSS-Protection: 1; report=http://www.example.com/xss
The following values would disable it:
X-XSS-Protection: 0
The X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).
Note that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).</other><evidence/><cweid>933</cweid><confidence>Medium</confidence><wascid>14</wascid><description>Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server</description><messageId>30</messageId><url>http://172.17.0.3/b/</url><reference>https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet
https://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/</reference><solution>Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.</solution><alert>Web Browser XSS Protection Not Enabled</alert><param/><attack/><risk>Low</risk><id>42</id></alert><alert type="set"><other>This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.
At "High" threshold this scanner will not alert on client or server error responses.</other><evidence/><cweid>0</cweid><confidence>Medium</confidence><wascid>15</wascid><description>The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.</description><messageId>30</messageId><url>http://172.17.0.3/b/</url><reference>http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx
https://www.owasp.org/index.php/List_of_useful_HTTP_headers</reference><solution>Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.
If possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.</solution><alert>X-Content-Type-Options Header Missing</alert><param/><attack/><risk>Low</risk><id>43</id></alert><alert type="set"><other>At "High" threshold this scanner will not alert on client or server error responses.</other><evidence/><cweid>0</cweid><confidence>Medium</confidence><wascid>0</wascid><description>X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.</description><messageId>30</messageId><url>http://172.17.0.3/b/</url><reference>http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx</reference><solution>Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY.  ALLOW-FROM allows specific websites to frame the web page in supported web browsers).</solution><alert>X-Frame-Options Header Not Set</alert><param/><attack/><risk>Medium</risk><id>44</id></alert><alert type="set"><other>The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: 
X-XSS-Protection: 1; mode=block
X-XSS-Protection: 1; report=http://www.example.com/xss
The following values would disable it:
X-XSS-Protection: 0
The X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).
Note that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).</other><evidence/><cweid>933</cweid><confidence>Medium</confidence><wascid>14</wascid><description>Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server</description><messageId>31</messageId><url>http://172.17.0.3/b/index.php?id=5</url><reference>https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet
https://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/</reference><solution>Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.</solution><alert>Web Browser XSS Protection Not Enabled</alert><param/><attack/><risk>Low</risk><id>45</id></alert><alert type="set"><other>This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.
At "High" threshold this scanner will not alert on client or server error responses.</other><evidence/><cweid>0</cweid><confidence>Medium</confidence><wascid>15</wascid><description>The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.</description><messageId>31</messageId><url>http://172.17.0.3/b/index.php?id=5</url><reference>http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx
https://www.owasp.org/index.php/List_of_useful_HTTP_headers</reference><solution>Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.
If possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.</solution><alert>X-Content-Type-Options Header Missing</alert><param/><attack/><risk>Low</risk><id>46</id></alert><alert type="set"><other>At "High" threshold this scanner will not alert on client or server error responses.</other><evidence/><cweid>0</cweid><confidence>Medium</confidence><wascid>0</wascid><description>X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.</description><messageId>31</messageId><url>http://172.17.0.3/b/index.php?id=5</url><reference>http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx</reference><solution>Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY.  ALLOW-FROM allows specific websites to frame the web page in supported web browsers).</solution><alert>X-Frame-Options Header Not Set</alert><param/><attack/><risk>Medium</risk><id>47</id></alert><alert type="set"><other>The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: 
X-XSS-Protection: 1; mode=block
X-XSS-Protection: 1; report=http://www.example.com/xss
The following values would disable it:
X-XSS-Protection: 0
The X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).
Note that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).</other><evidence/><cweid>933</cweid><confidence>Medium</confidence><wascid>14</wascid><description>Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server</description><messageId>32</messageId><url>http://172.17.0.3/b/index.php?id=6</url><reference>https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet
https://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/</reference><solution>Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.</solution><alert>Web Browser XSS Protection Not Enabled</alert><param/><attack/><risk>Low</risk><id>48</id></alert><alert type="set"><other>This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.
At "High" threshold this scanner will not alert on client or server error responses.</other><evidence/><cweid>0</cweid><confidence>Medium</confidence><wascid>15</wascid><description>The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.</description><messageId>32</messageId><url>http://172.17.0.3/b/index.php?id=6</url><reference>http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx
https://www.owasp.org/index.php/List_of_useful_HTTP_headers</reference><solution>Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.
If possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.</solution><alert>X-Content-Type-Options Header Missing</alert><param/><attack/><risk>Low</risk><id>49</id></alert><alert type="set"><other>At "High" threshold this scanner will not alert on client or server error responses.</other><evidence/><cweid>0</cweid><confidence>Medium</confidence><wascid>0</wascid><description>X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.</description><messageId>32</messageId><url>http://172.17.0.3/b/index.php?id=6</url><reference>http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx</reference><solution>Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY.  ALLOW-FROM allows specific websites to frame the web page in supported web browsers).</solution><alert>X-Frame-Options Header Not Set</alert><param/><attack/><risk>Medium</risk><id>50</id></alert><alert type="set"><other>The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: 
X-XSS-Protection: 1; mode=block
X-XSS-Protection: 1; report=http://www.example.com/xss
The following values would disable it:
X-XSS-Protection: 0
The X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).
Note that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).</other><evidence/><cweid>933</cweid><confidence>Medium</confidence><wascid>14</wascid><description>Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server</description><messageId>33</messageId><url>http://172.17.0.3/b/index.php?id=7</url><reference>https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet
https://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/</reference><solution>Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.</solution><alert>Web Browser XSS Protection Not Enabled</alert><param/><attack/><risk>Low</risk><id>51</id></alert><alert type="set"><other>This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.
At "High" threshold this scanner will not alert on client or server error responses.</other><evidence/><cweid>0</cweid><confidence>Medium</confidence><wascid>15</wascid><description>The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.</description><messageId>33</messageId><url>http://172.17.0.3/b/index.php?id=7</url><reference>http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx
https://www.owasp.org/index.php/List_of_useful_HTTP_headers</reference><solution>Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.
If possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.</solution><alert>X-Content-Type-Options Header Missing</alert><param/><attack/><risk>Low</risk><id>52</id></alert><alert type="set"><other>At "High" threshold this scanner will not alert on client or server error responses.</other><evidence/><cweid>0</cweid><confidence>Medium</confidence><wascid>0</wascid><description>X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.</description><messageId>33</messageId><url>http://172.17.0.3/b/index.php?id=7</url><reference>http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx</reference><solution>Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY.  ALLOW-FROM allows specific websites to frame the web page in supported web browsers).</solution><alert>X-Frame-Options Header Not Set</alert><param/><attack/><risk>Medium</risk><id>53</id></alert><alert type="set"><other>The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: 
X-XSS-Protection: 1; mode=block
X-XSS-Protection: 1; report=http://www.example.com/xss
The following values would disable it:
X-XSS-Protection: 0
The X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).
Note that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).</other><evidence/><cweid>933</cweid><confidence>Medium</confidence><wascid>14</wascid><description>Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server</description><messageId>34</messageId><url>http://172.17.0.3/b/index.php?id=8</url><reference>https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet
https://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/</reference><solution>Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.</solution><alert>Web Browser XSS Protection Not Enabled</alert><param/><attack/><risk>Low</risk><id>54</id></alert><alert type="set"><other>This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.
At "High" threshold this scanner will not alert on client or server error responses.</other><evidence/><cweid>0</cweid><confidence>Medium</confidence><wascid>15</wascid><description>The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.</description><messageId>34</messageId><url>http://172.17.0.3/b/index.php?id=8</url><reference>http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx
https://www.owasp.org/index.php/List_of_useful_HTTP_headers</reference><solution>Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.
If possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.</solution><alert>X-Content-Type-Options Header Missing</alert><param/><attack/><risk>Low</risk><id>55</id></alert><alert type="set"><other>At "High" threshold this scanner will not alert on client or server error responses.</other><evidence/><cweid>0</cweid><confidence>Medium</confidence><wascid>0</wascid><description>X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.</description><messageId>34</messageId><url>http://172.17.0.3/b/index.php?id=8</url><reference>http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx</reference><solution>Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY.  ALLOW-FROM allows specific websites to frame the web page in supported web browsers).</solution><alert>X-Frame-Options Header Not Set</alert><param/><attack/><risk>Medium</risk><id>56</id></alert><alert type="set"><other>The original page results were successfully replicated using the expression [9-2] as the parameter value
The parameter value being modified was NOT stripped from the HTML output for the purposes of the comparison</other><evidence/><cweid>89</cweid><confidence>Medium</confidence><wascid>19</wascid><description>SQL injection may be possible.</description><messageId>134</messageId><url>http://172.17.0.3/index.php?id=9-2</url><reference>https://www.owasp.org/index.php/Top_10_2010-A1
https://www.owasp.org/index.php/SQL_Injection_Prevention_Cheat_Sheet</reference><solution>Do not trust client side input, even if there is client side validation in place.  
In general, type check all data on the server side.
If the application uses JDBC, use PreparedStatement or CallableStatement, with parameters passed by '?'
If the application uses ASP, use ADO Command Objects with strong type checking and parameterized queries.
If database Stored Procedures can be used, use them.
Do *not* concatenate strings into queries in the stored procedure, or use 'exec', 'exec immediate', or equivalent functionality!
Do not create dynamic SQL queries using simple string concatenation.
Escape all data received from the client.
Apply a 'whitelist' of allowed characters, or a 'blacklist' of disallowed characters in user input.
Apply the principle of least privilege by using the least privileged database user possible.
In particular, avoid using the 'sa' or 'db-owner' database users. This does not eliminate SQL injection, but minimizes its impact.
Grant the minimum database access that is necessary for the application.</solution><alert>SQL Injection</alert><param>id</param><attack>9-2</attack><risk>High</risk><id>57</id></alert><alert type="set"><other>The original page results were successfully replicated using the expression [10-2] as the parameter value
The parameter value being modified was NOT stripped from the HTML output for the purposes of the comparison</other><evidence/><cweid>89</cweid><confidence>Medium</confidence><wascid>19</wascid><description>SQL injection may be possible.</description><messageId>148</messageId><url>http://172.17.0.3/b/index.php?id=10-2</url><reference>https://www.owasp.org/index.php/Top_10_2010-A1
https://www.owasp.org/index.php/SQL_Injection_Prevention_Cheat_Sheet</reference><solution>Do not trust client side input, even if there is client side validation in place.  
In general, type check all data on the server side.
If the application uses JDBC, use PreparedStatement or CallableStatement, with parameters pas100 62368  100 62368    0     0   781k      0 --:--:-- --:--:-- --:--:--  790k
sed by '?'
If the application uses ASP, use ADO Command Objects with strong type checking and parameterized queries.
If database Stored Procedures can be used, use them.
Do *not* concatenate strings into queries in the stored procedure, or use 'exec', 'exec immediate', or equivalent functionality!
Do not create dynamic SQL queries using simple string concatenation.
Escape all data received from the client.
Apply a 'whitelist' of allowed characters, or a 'blacklist' of disallowed characters in user input.
Apply the principle of least privilege by using the least privileged database user possible.
In particular, avoid using the 'sa' or 'db-owner' database users. This does not eliminate SQL injection, but minimizes its impact.
Grant the minimum database access that is necessary for the application.</solution><alert>SQL Injection</alert><param>id</param><attack>10-2</attack><risk>High</risk><id>58</id></alert></alerts>Perform ZAProxy
Skip loadSession
URL http://*.workdaysuv.com/ added to Context [3]
SCANMOD : NOT_AUTHENTICATED
Skip spidering the site [http://*.workdaysuv.com/]
Skip Ajax spidering the site [http://*.workdaysuv.com/]
Skip scanning the site [http://*.workdaysuv.com/]
File [/var/jenkins_home/workspace/demo/demo.html] saved
Skipped creating jiras
Save session to [/var/jenkins_home/workspace/demo/74]
37493 [ZAP-ProxyThread-15] INFO org.parosproxy.paros.control.Control  - Save Session
37494 [ZAP-ProxyThread-15] INFO org.parosproxy.paros.core.scanner.Scanner  - scanner stopped
37540 [Thread-148] INFO hsqldb.db.HSQLDB379AF3DEBD.ENGINE  - dataFileCache commit start
37741 [Thread-148] INFO hsqldb.db.HSQLDB379AF3DEBD.ENGINE  - Database closed
38002 [Thread-148] INFO hsqldb.db.HSQLDB379AF3DEBD.ENGINE  - dataFileCache open start
38010 [Thread-148] INFO hsqldb.db.HSQLDB379AF3DEBD.ENGINE  - dataFileCache open end
Total alerts = 		ApiResponseElement numberOfAlerts = 47

Total messages = 		ApiResponseElement numberOfMessages = 268

Shutdown ZAProxy
Finished: SUCCESS
